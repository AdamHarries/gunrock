/*! \page simple_example A Simple Gunrock Example

This code sample demonstrates basic usage of Gunrock for finding the largest
connected component of a graph, running BFS on this connected component, and
then computing betweenness-centrality values, all on the GPU.

\section codeWalkthrough Sample Code Walkthrough

\dontinclude simple_example.cu

This simple example shows you how to initialize graph primitive data
structures, run the algorithm, and extract results. The following description
first shows each block of code and then explains it.

\skip int dev =
\until ContextPtr

The \c mgpu::CreateCudaDevice function finds the device that supports CUDA and
initializes it.

\skip g_undirected = true;
\until }

The above chunk of code will parse the command line arguments. In this
example, we set \c g_undirected to be true to imply that the input
graph is undirected.

\skip if (graph_type ==
\until fflush(stdout);

The current version of Gunrock only supports input graphs stored in
matrix-market coordinate-formatted files. When we read a graph from a file, we
must store it into a data structure. Gunrock uses a <a
href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">compressed
sparse row (CSR)</a> data structure internally. Before we define this CSR data
structure, we must define the datatypes in this data structure. In general, we
need three datatypes in our CSR data structure. 
- \c VertexId is used as the node identifier type; here we set it as \c int.
- \c Value is used as the datatype of a value attached to edge or node in the
  graph. Here we set it as \c float. Most of the time, either \c VertexId or \c
  Value will serve as the datatype for any computational results we get from
  the graph algorithm.
- \c SizeT datatype is used as the datatype for storing the number of nodes in
  the graph and the number of edges in the graph. We usually set it as \c int
  or <tt> unsigned long </tt>. 

We then define an object with the default argument \c stream_from_host \c
false. This will disable streaming from host memory when we later populate the
object with data. \c BuildMarketGraph() reads from a Matrix Market-stored file
into a CSR data structure. In this example, we suppose the graph has no edge
weight, so we use \c false as the template argument. As a test utility
function, \c DisplayGraph() will display the first 40 nodes and their neighbor
lists in the graph in the following format:

<tt>
<br>node_id_0: neighbor_node_id_0, neighbor_node_id_1, ..., neighbor_node_id_n
<br>node_id_1: neighbor_node_id_0, neighbor_node_id_1, ..., neighbor_node_id_n
<br>...
</tt>

The main function in this example is \c RunTests(csr, args).

\subsection RunTests RunTests Function

\c RunTests starts by defining the problem data structure for a graph
primitive. A problem data structure stores the graph structural data, edge or
node value data, and all other data we need for running the graph algorithm. It
has four template arguments. We have explained the first three arguments in the
previous section; the last argument is a boolean flag that specifies whether we
need only one set of ping-pong storage or two. A set of ping-pong storage
contains two buffers for storing both the input and the output queue for a GPU
kernel function.  At the beginning of the first iteration of the GPU kernel
function call, we put the input data in one queue of the ping-pong storage;
after the first function call, we store the output in the other queue of the
ping-pong storage. In the next iteration of the GPU kernel function call, we
switch the two queues, using the output of the previous function call as the
input of the new function call. Among all three graph primitives currently in
Gunrock, only connected-component needs two sets of ping-pong storage; the
other two primitives only need one set of ping-pong storage.

\dontinclude simple_example.cu

\skip typedef CCProblem
\until CCProblem_T;

Then we allocate host-side arrays for reference check and GPU-computed results.
For the connected component primitive, there is only one output array from the
GPU computed result: the component ID for each node. To actually run the graph
algorithm on the GPU, we need to define a \c CCEnactor object. An enactor class
serves as the manager of the running of a graph algorithm. Gunrock divides
a graph algorithm into several device functions running on the GPU. We call
such functions kernel functions. Each graph algorithm may consist a set of
kernel functions. The enactor class manages how we run these functions to get
the results. It also collects statistical data for these kernel functions, such
as running time, total elements sent to kernel functions, and the load
balancing matric (average duty). The template argument \c INSTRUMENT is
a boolean flag that specifies whether we want to keep such statistical data.

\skip reference_component_ids
\until CCEnactor

In the next step, we create a pointer of the \c CCProblem type. The
gunrock::app::cc::CCProblem::Init() function will first copy all the
graph-related data from CPU to GPU and then initialize other data members in
gunrock::app::cc::CCProblem::DataSlice. After this we will be ready to run the
graph algorithm on the GPU.

\skip cc_problem
\until num_gpus

We next compute the reference solution for CC on the CPU, storing the result in
\c reference_check.

\skip Compute reference CPU CC solution
\until }

Now we can run the connected component primitive on the GPU. To record the
kernel running time, simply define a \c gpu_timer of \c GpuTimer type. Note
that we need to call the gunrock::app::cc::CCProblem::Reset() function before
the \c Enact function to reset values in
gunrock::app::cc::CCProblem::DataSlice. The
gunrock::app::cc::CCEnactor::Enact() takes a pointer of
gunrock::app::cc::CCProblem type as the input, runs the connected component
primitive, and stores the result in
gunrock::app::cc::CCProblem::DataSlice::d_component_ids. We store the GPU
running time in a \c float variable \c elapsed.

\skip // Perform CC
\until ElapsedMillis();

After the \c Enact function, we need to copy the result from the \c cc_problem
data structure on the GPU into \c h_component_ids. We can further call
gunrock::app::cc::CCProblem::ComputeCCHistogram() to compute the histogram for
the connected components of the graph. Finally we can run some validation code,
get the top 10 largest connected components, and print their root node ids.
DisplayCCSolution() will print the component ids of the first 40 nodes for
testing purpose. Now we can set the source node for Breadth-First Search as the
root of the largest connected component.

\skip cc_problem->Extract
\until src = cclist[0].root

The final step of a graph primitive process is cleanup. Note we only need to
delete the problem object; its destructor function will release the device
memory for us. We finally call \c cudaDeviceSynchronize to make sure the GPU
device has completed all preceding requested tasks.

\skip delete cc_problem
\until cudaDeviceSync

For Breadth-First Search primitive, the process is the same. We first define
a pointer to the gunrock::app::bfs::BFSProblem type.  Here we set the template
argument \c MARK_PREDECESSORS to \c true to specify that we want the algorithm
to keep both the distances from source and the predecessor node id as the
result.

\skip typedef BFSProblem
\until BFSProblem_T;

Then we allocate a host-side array for doing a reference check and storing
GPU-computed results. For BFS, the results include
gunrock::app::bfs::BFSProblem::DataSlice::d_labels and
gunrock::app::bfs::BFSProblem::DataSlice::d_preds. We then define the BFS
enactor object of the gunrock::app::bfs::BFSEnactor type, initialize the
gunrock::app::bfs::BFSProblem type BFS problem object, and run the CPU and the
GPU BFS reference algorithm, similar to what we did in the CC graph primitive.
If the template argument \c INSTRUMENT is set, we can use the \c GetStatistics
function to get total elements queued, average kernel duty (a load balancing
metric), and for BFS, the searching depth from the enactor object. In this
example, we only show how to get statistical data and display it for BFS
problem, but all three graph primitives have \c GetStatistics functions as
public interfaces users can call.

\skip reference_labels
\until gpu_timer.ElapsedMillis

When we finish the BFS algorithm, we copy the results from GPU to CPU using \c
Extract function. We also use gunrock::util::CompareResults() to validate the
computed results we get. Here we only do this for the distance from the source
value of each node. The \c DisplayBFSSolution() function will display the
distance from source value and the predecessor id value for the first 40 nodes
in the graph. The \c DisplayBFSStats() function will display the total queued
element number, the maximum search depth, and the average GPU kernel function
duty. Users can also implement their own version of these display functions.

\skip bfs_problem->Extract
\until cudaDeviceSynchronize

The third graph primitive we want to run is Brandes's Betweenness Centrality.
We first set the source node to -1 to inform the algorithm to compute the BC
values for all nodes in the graph. The preparation steps are similar to those
of the previous two primitives.

\skip src = -1;
\until BC Problem Initialization Failed

In the actual computing process, we need to manually iterate over all the nodes
in the graph. We design the BC primitive this way to provide more flexible use
of BC value computing. For example, you can build your own approximate BC
algorithm using this primitive.

\skip start_src = 0;
\until }

Note after the algorithm we need to call gunrock::util::MemsetScaleKernel() for
normalization. Because we consider the graph as undirected, each node's BC
value is thus doubled, so we need to halve them to get the correct values. 

\skipline MemsetScaleKernel

The final step is the cleanup code for the BC primitive.

\skip delete bc_problem
\until cudaDeviceSync

We hope this can help you to integrate Gunrock into your project.

*/
